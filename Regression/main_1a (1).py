# -*- coding: utf-8 -*-
"""Task_1a_GZ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bk5DEJ85bSq_HYsFL-4cd0DfOsnDdGn7
"""

# This serves as a template which will guide you through the implementation of this task. It is advised
# to first read the whole template and get a sense of the overall structure of the code before trying to fill in any of the TODO gaps
# First, we import necessary libraries:
import pandas as pd
import numpy as np
from sklearn.linear_model import Ridge
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
from google.colab import drive
import sys
import os

# Commented out IPython magic to ensure Python compatibility.
path = 'MyDrive/Intro_to_ML/Task_1a' 

drive.mount('/content/drive', force_remount=True)

# %cd /content/drive/MyDrive/Intro_to_ML/Task_1a/

env_path = f'/content/drive/{path}'
#Â Add the handout folder to python paths
if env_path not in sys.path:
    sys.path.append(env_path)

def fit(X, y, lam):
    """
    This function receives training data points, then fits the ridge regression on this data
    with regularization hyperparameter lambda. The weights w of the fitted ridge regression
    are returned. 

    Parameters
    ----------
    X: matrix of floats, dim = (135,13), inputs with 13 features
    y: array of floats, dim = (135,), input labels)
    lam: float. lambda parameter, used in regularization term

    Returns
    ----------
    w: array of floats: dim = (13,), optimal parameters of ridge regression
    """
    w = np.zeros((13,))
    met = Ridge(alpha=lam,fit_intercept=False)
    met.fit(X,y)
    w = met.coef_
    
    assert w.shape == (13,)
    return w

def calculate_RMSE(w, X, y):
    """This function takes test data points (X and y), and computes the empirical RMSE of 
    predicting y from X using a linear model with weights w. 

    Parameters
    ----------
    w: array of floats: dim = (13,), optimal parameters of ridge regression 
    X: matrix of floats, dim = (15,13), inputs with 13 features
    y: array of floats, dim = (15,), input labels

    Returns
    ----------
    RMSE: float: dim = 1, RMSE value
    """
    RMSE = 0
    y_test = np.matmul(X ,w)
    RMSE = mean_squared_error(y, y_test, squared=False)
    
    assert np.isscalar(RMSE)
    return RMSE

def average_LR_RMSE(X, y, lambdas, n_folds):
    """
    Main cross-validation loop, implementing 10-fold CV. In every iteration (for every train-test split), the RMSE for every lambda is calculated, 
    and then averaged over iterations.
    
    Parameters
    ---------- 
    X: matrix of floats, dim = (150, 13), inputs with 13 features
    y: array of floats, dim = (150, ), input labels
    lambdas: list of floats, len = 5, values of lambda for which ridge regression is fitted and RMSE estimated
    n_folds: int, number of folds (pieces in which we split the dataset), parameter K in KFold CV
    
    Returns
    ----------
    avg_RMSE: array of floats: dim = (5,), average RMSE value for every lambda
    """
    
    RMSE_mat = np.zeros((n_folds, len(lambdas)))

    lidx = 0
    for L in lambdas:
        kf = KFold(n_splits=n_folds)
        count = 0
        for train, test in kf.split(X):
            w = fit(X[train],y[train],L)
            run_RMSE = calculate_RMSE(w, X[test],y[test])
            RMSE_mat[count][lidx] = run_RMSE
            count+=1
        lidx+=1

    avg_RMSE = np.mean(RMSE_mat, axis=0)
    assert avg_RMSE.shape == (5,)
    return avg_RMSE

# Main function. You don't have to change this
if __name__ == "__main__":
    # Data loading
    data = pd.read_csv("train.csv")
    y = data["y"].to_numpy()
    data = data.drop(columns="y")
    # print a few data samples
    #print(data.head())

    X = data.to_numpy()
    # The function calculating the average RMSE
    lambdas = [0.1, 1, 10, 100, 200]
    n_folds = 10
    avg_RMSE = average_LR_RMSE(X, y, lambdas, n_folds)

    min_index = np.argmin(avg_RMSE)
    min_value = avg_RMSE[min_index]

    print("Optimal lambda value: "+str(lambdas[min_index]))
    print("Average RMSE: "+str(min_value))

    # Save results in the required format
    np.savetxt("./results.csv", avg_RMSE, fmt="%.12f")

